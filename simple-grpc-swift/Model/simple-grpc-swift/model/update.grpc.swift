//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: simple-grpc-swift/model/update.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Update_UpdateClient`, then call methods of this protocol to make API calls.
public protocol Update_UpdateClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Update_UpdateClientInterceptorFactoryProtocol? { get }

  func login(
    _ request: Update_LoginRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Update_LoginRequest, Update_LoginResponse>

  func logout(
    _ request: Update_LogoutRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Update_LogoutRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func serverPromotions(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?,
    handler: @escaping (Update_UpdateStreamResponse) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Update_UpdateStreamResponse>
}

extension Update_UpdateClientProtocol {
  public var serviceName: String {
    return "update.Update"
  }

  /// Unary call to Login
  ///
  /// - Parameters:
  ///   - request: Request to send to Login.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func login(
    _ request: Update_LoginRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Update_LoginRequest, Update_LoginResponse> {
    return self.makeUnaryCall(
      path: "/update.Update/Login",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLoginInterceptors() ?? []
    )
  }

  /// Unary call to Logout
  ///
  /// - Parameters:
  ///   - request: Request to send to Logout.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func logout(
    _ request: Update_LogoutRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Update_LogoutRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/update.Update/Logout",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLogoutInterceptors() ?? []
    )
  }

  /// Server streaming call to ServerPromotions
  ///
  /// - Parameters:
  ///   - request: Request to send to ServerPromotions.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func serverPromotions(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (Update_UpdateStreamResponse) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Update_UpdateStreamResponse> {
    return self.makeServerStreamingCall(
      path: "/update.Update/ServerPromotions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeServerPromotionsInterceptors() ?? [],
      handler: handler
    )
  }
}

public protocol Update_UpdateClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'login'.
  func makeLoginInterceptors() -> [ClientInterceptor<Update_LoginRequest, Update_LoginResponse>]

  /// - Returns: Interceptors to use when invoking 'logout'.
  func makeLogoutInterceptors() -> [ClientInterceptor<Update_LogoutRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'serverPromotions'.
  func makeServerPromotionsInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Update_UpdateStreamResponse>]
}

public final class Update_UpdateClient: Update_UpdateClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Update_UpdateClientInterceptorFactoryProtocol?

  /// Creates a client for the update.Update service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Update_UpdateClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Update_UpdateProvider: CallHandlerProvider {
  var interceptors: Update_UpdateServerInterceptorFactoryProtocol? { get }

  func login(request: Update_LoginRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Update_LoginResponse>

  func logout(request: Update_LogoutRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  func serverPromotions(request: SwiftProtobuf.Google_Protobuf_Empty, context: StreamingResponseCallContext<Update_UpdateStreamResponse>) -> EventLoopFuture<GRPCStatus>
}

extension Update_UpdateProvider {
  public var serviceName: Substring { return "update.Update" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Login":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Update_LoginRequest>(),
        responseSerializer: ProtobufSerializer<Update_LoginResponse>(),
        interceptors: self.interceptors?.makeLoginInterceptors() ?? [],
        userFunction: self.login(request:context:)
      )

    case "Logout":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Update_LogoutRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeLogoutInterceptors() ?? [],
        userFunction: self.logout(request:context:)
      )

    case "ServerPromotions":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Update_UpdateStreamResponse>(),
        interceptors: self.interceptors?.makeServerPromotionsInterceptors() ?? [],
        userFunction: self.serverPromotions(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Update_UpdateServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'login'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLoginInterceptors() -> [ServerInterceptor<Update_LoginRequest, Update_LoginResponse>]

  /// - Returns: Interceptors to use when handling 'logout'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLogoutInterceptors() -> [ServerInterceptor<Update_LogoutRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'serverPromotions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeServerPromotionsInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Update_UpdateStreamResponse>]
}
